15,"fn fibonacci(n: i32) -> i32 { if n <= 1 { n } else { fibonacci(n - 1) + fibonacci(n - 2) } }","Recursive function to calculate Fibonacci number"
16,"fn reverse_string(s: &str) -> String { s.chars().rev().collect() }","Function to reverse a string"
17,"fn count_vowels(s: &str) -> usize { s.chars().filter(|c| "aeiouAEIOU".contains(*c)).count() }","Function to count vowels in a string"
18,"fn is_palindrome(s: &str) -> bool { s == s.chars().rev().collect::<String>() }","Function to check if a string is palindrome"
19,"fn factorial_iterative(n: i32) -> i32 { (1..=n).product() }","Iterative function to calculate factorial of a number"
20,"fn binary_search(arr: &[i32], target: i32) -> bool { arr.binary_search(&target).is_ok() }","Function to perform binary search on a sorted array"
21,"fn quicksort(arr: &mut [i32]) { if arr.len() <= 1 { return; } let (pivot, rest) = arr.split_first_mut().unwrap(); let mut left: Vec<i32> = rest.iter().filter(|&&x| x <= *pivot).cloned().collect(); let mut right: Vec<i32> = rest.iter().filter(|&&x| x > *pivot).cloned().collect(); quicksort(&mut left); quicksort(&mut right); arr[..left.len()].copy_from_slice(&left); arr[left.len()] = *pivot; arr[left.len()+1..].copy_from_slice(&right); }","Recursive function to sort an array using quicksort algorithm"
22,"fn merge_sort(arr: &mut [i32]) { if arr.len() <= 1 { return; } let mid = arr.len() / 2; let mut left = arr[..mid].to_vec(); let mut right = arr[mid..].to_vec(); merge_sort(&mut left); merge_sort(&mut right); merge(arr, &left, &right); } fn merge(result: &mut [i32], left: &[i32], right: &[i32]) { let mut i = 0; let mut j = 0; for k in 0..result.len() { if i < left.len() && (j >= right.len() || left[i] <= right[j]) { result[k] = left[i]; i += 1; } else { result[k] = right[j]; j += 1; } } }","Recursive function to sort an array using merge sort algorithm"
23,"fn bubble_sort(arr: &mut [i32]) { let n = arr.len(); for i in 0..n { for j in 0..n-i-1 { if arr[j] > arr[j+1] { arr.swap(j, j+1); } } } }","Function to sort an array using bubble sort algorithm"
24,"fn insertion_sort(arr: &mut [i32]) { for i in 1..arr.len() { let mut j = i; while j > 0 && arr[j] < arr[j-1] { arr.swap(j, j-1); j -= 1; } } }","Function to sort an array using insertion sort algorithm"
25,"fn selection_sort(arr: &mut [i32]) { for i in 0..arr.len() { let mut min_idx = i; for j in i+1..arr.len() { if arr[j] < arr[min_idx] { min_idx = j; } } arr.swap(i, min_idx); } }","Function to sort an array using selection sort algorithm"
